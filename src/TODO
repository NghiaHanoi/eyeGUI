### VERSION 0.9
- Do background rendering in some helper class. to much copy code (in assets?)
- WordSuggest
  - Interface function with word + dictionary index
  - Display suggestions
  - Logger does strange stuff when dictionary does not exist and suggest is called
  ...

- Wiki
  - Dictionary
    - UTF-8 (otherwise umlaute etc are wrong interpreted) -> everything should be in UTF8 encoding
  - WordSuggest
  
- Dictionary
  - write email to utf8rewind author because of windows fix
  
- Rewrite Element rendering (more layers, not so big shaders)
  - TextFlow / Simple must be refactored after that
- Keyboard: Better german and english layout
- TextEdit element for easy text editing (zoom, cursor etc)
- Replace freetype2 by stb and use their packing algorithm!

### VERSION 0.10
- Audio (PortAudio library?)
  - Audio effects defined in style sheet

### VERSION 0.x
- IDEA: disable opengl storing stuff by function (to save computation time)
- Uniform locations of texture slots not used! (may be problem if there is more than one in use at once)
- Right to left text (hebrew)
	- Maybe detect hebrew characters and react
- Localization reloading on the fly (all textflows would have to be recalculated, maybe other default font...)
- Adaptive scaling is not that smooth
- Input: Consumption is strange, because for example button used input and then element update method does not know, whether it was submethod or other element. Ok, it could guess because before call of specialUpdate it was not and after that it was.
- Desc(ription) for elements
	- lookup in localization file
	- global "help" mode or just per element?
- uniform absolute include pathes
- Think about: how to automatically fit text into box or fit box around text
- set scale of text via interface (and determine whether text fits via interface?)
	
### VERSION 1.0
- Code review!
  - valgrind
	- Check all fin whether utf-8 compatible
- Some members of element could be private but getters necessary..

Notes:
- OpenGL state: bound texture not rescued  (neither in texture/font class nor in GLSetup)
- Altough Keyboard is interactive element, interact and select are NOT implemented because not trivial and not that important
- RenderItem: some shader programs optimize uv attribute away, so cannot be set and throw opengl error
- maybe switch to double to accumulate time. otherwise, every half hour there will be flickering
- Precaching of textures (maybe write something to an text file)
- Maybe use sampler states for textures instead of per texture settings
- Rasterization of SVGs are depending on DPI at the moment
- Strange or hacky: Since OGL functions are loaded already by the library, what happens in the main program doing the same? Seems to work at least...
- Stack
  - Non used pixels should be better shared among all elements not only the head in stack -> very difficult stuff
- Mapping of images / icons would be cool (easy exchange in whole application) (path without .png or .svg is interperted as mapping)
- Use UTF8-CPP for config and stylesheet (what would be the advantage?)
- Input
  - Maybe blocks have an option: kill or not kill input (both possible)
  - is selecting via keyboard input? (at the moment it is not blocked if input is disabled for layout)

Reminders:
- Parser responsible for value ranges!
- XML may not contain information about current state (activity, hiding etc!!!)
- namespaces easier because Layout and GUI is visible to outer space
- Input: can be NULL if irrelevant for Element
- Getter for transform and size do only work after first update
- Namespaces easier because Layout and GUI is visible to outer space
- Element's mBorderAspectRatio for avoiding borders to kill aspect ratio only used in picture at the moment
- Localization files MUST BE encoded in UTF-8